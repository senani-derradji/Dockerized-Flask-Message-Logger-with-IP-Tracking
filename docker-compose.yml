version : '3.8'
services:
   db:
     image: mariadb:latest
     restart: always
     networks:
       - backend
       - monitoring
     environment:
       MARIADB_ROOT_PASSWORD: root
       MARIADB_DATABASE: ${DB_NAME}
       MARIADB_USER: ${DB_USER}
       MARIADB_PASSWORD: ${DB_PASSWORD}
     volumes:
       - db_data:/var/lib/mysql
       - ./prometheus/mysql-exporter/db/init/grants.sql:/docker-entrypoint-initdb.d/grants.sql
     ports:
       - "3306:3306"
   
   redis:
      image : redis:latest
      restart : always
      networks:
         - backend
         - monitoring
      environment:
         REDIS_HOST: redis
         REDIS_PORT: 6379
         REDIS_ADDR: redis:6379
         REDIS_PASSWORD: ${REDIS_PASSWORD}
      command: redis-server --requirepass ${REDIS_PASSWORD}
      ports:
         - "6379:6379"
      volumes:
         - redis_data:/data
         
   redis_exporter:
      image: oliver006/redis_exporter
      restart: always
      networks:
         - monitoring
      ports:
         - "9121:9121"
      environment:
         REDIS_ADDR: redis:6379
         REDIS_PASSWORD: ${REDIS_PASSWORD}
         REDIS_HOST : redis
         REDIS_PORT : 6379
      command: --redis.addr=redis:6379 --redis.password=${REDIS_PASSWORD}
      depends_on:
         - redis
         
   nginx :
      build: 
         context: ./nginx
      restart : always
      networks:
         - frontend
         - monitoring
      ports:
         - "80:80"
         - "443:443"
         - "8080:8080"

      volumes:
         - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
         - ./nginx/certs:/etc/nginx/certs:ro
         - nginx_cache:/var/cache/nginx/my_cache:rw
      depends_on:
         - backend_webapp
   
   nginx_exporter:
      image: nginx/nginx-prometheus-exporter
      restart: always
      networks:
         - monitoring
      ports:
         - "9113:9113"
      command: -nginx.scrape-uri=http://nginx:8080/stub_status

      depends_on:
         - nginx


   backend_webapp:
     build: ./app
     container_name: backend_webapp
     networks:
       - frontend
       - backend
   
     depends_on:
       - db
       - redis
     ports:
       - "5000:5000"
     environment:
       REDIS_HOST: ${REDIS_HOST}
       REDIS_PASSWORD : ${REDIS_PASSWORD}
       REDIS_PORT: ${REDIS_PORT}
       DB_HOST: ${DB_HOST}
       DB_NAME: ${DB_NAME}
       DB_USER: ${DB_USER}
       DB_PASSWORD: ${DB_PASSWORD}
       SECRET_KEY: mysecret
     volumes:
       - /home:/app/vlm-web-app:ro
      
   mysql_exporter:
      image: prom/mysqld-exporter
      restart: always
      networks:
         - backend
         - monitoring
      environment:
         DATA_SOURCE_NAME: "${DB_USER}:${DB_PASSWORD}@tcp(db:3306)/"

      volumes:
         - ./prometheus/mysql-exporter/my.cnf:/my.cnf:ro
      command:
         - '--config.my-cnf=/my.cnf'
      ports:
         - "9104:9104"
      depends_on:
         - db

   node_exporter:
      image: prom/node-exporter
      restart: always
      networks:
         - backend
         - frontend
         - monitoring
      ports:
         - "9100:9100"
      command:
         - '--path.rootfs=/host'
         - '--path.procfs=/host/proc'
         - '--path.sysfs=/host/sys'
      volumes:
         - /:/host:ro,rslave
         - /proc:/host/proc:ro,rslave
         - /sys:/host/sys:ro,rslave
   
   prometheus:
      image: prom/prometheus
      restart: always
      networks:
         - backend
         - frontend
         - monitoring
      command:
         - '--config.file=/etc/prometheus/prometheus.yml'
      ports:
         - "9090:9090"
      volumes:
         - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
         - ./prometheus/data:/prometheus

   
   grafana:
      image: grafana/grafana
      restart: always
      networks:
         - frontend
         - monitoring
      ports:
         - "3000:3000"
      environment:
         GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
         GF_AUTH_ANONYMOUS_ENABLED: "true"
         GF_AUTH_ANONYMOUS_ORG_ROLE: "Viewer"
      volumes:
         - ./grafana/provisioning:/etc/grafana/provisioning
         - ./grafana/dashboards:/var/lib/grafana/dashboards
         - ./grafana/data:/var/lib/grafana


networks:
   frontend : {}
   backend  : 
       internal : true 
   monitoring : 
         driver: bridge

volumes:
   db_data : {}
   # portainer_data : {}
   redis_data : {}
   nginx_cache : {}